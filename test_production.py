#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""
import requests
import json
import time

def test_parser_functionality():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞"""
    base_url = "https://server4parcer-parser-4949.twc1.net"
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò –ü–ê–†–°–ï–†–ê")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ /health...")
    try:
        response = requests.get(f"{base_url}/health", timeout=10)
        if response.status_code == 200:
            health_data = response.json()
            print(f"   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤–∞: {health_data.get('message')}")
            print(f"   üìä URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {health_data.get('parser', {}).get('urls_configured', 0)}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ health check: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ /parser/status...")
    try:
        response = requests.get(f"{base_url}/parser/status", timeout=10)
        if response.status_code == 200:
            status_data = response.json()
            print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞: {status_data.get('status')}")
            print(f"   üîß –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {status_data.get('ready')}")
            urls = status_data.get('configuration', {}).get('urls', [])
            print(f"   üìã URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(urls)}")
            for i, url in enumerate(urls, 1):
                print(f"      {i}. {url[:60]}...")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # 3. –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
    print("\n3. –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ /parser/run...")
    try:
        response = requests.post(f"{base_url}/parser/run", timeout=60)
        if response.status_code == 200:
            run_result = response.json()
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞: {run_result.get('status')}")
            
            if run_result.get('status') == 'success':
                extracted = run_result.get('extracted', 0)
                print(f"   üéâ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {extracted} –∑–∞–ø–∏—Å–µ–π!")
                return True
            elif run_result.get('status') == 'error':
                error_msg = run_result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {error_msg}")
                if 'Executable doesn\'t exist' in error_msg:
                    print("   üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π Playwright –±—Ä–∞—É–∑–µ—Ä–æ–≤")
                return False
            else:
                print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {run_result}")
                return False
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ /api/booking-data...")
    try:
        response = requests.get(f"{base_url}/api/booking-data", timeout=10)
        if response.status_code == 200:
            data_result = response.json()
            total_records = data_result.get('total', 0)
            print(f"   üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {total_records}")
            
            if total_records > 0:
                sample_data = data_result.get('data', [])
                if sample_data:
                    sample = sample_data[0]
                    print(f"   üìù –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
                    print(f"      –î–∞—Ç–∞: {sample.get('date')}")
                    print(f"      –í—Ä–µ–º—è: {sample.get('time')}")
                    print(f"      –¶–µ–Ω–∞: {sample.get('price')}")
                    print(f"      –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {sample.get('provider')}")
                    return True
            else:
                print("   ‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –ø–æ–∫–∞ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã")
                return False
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = test_parser_functionality()
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("‚ùå –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ—Ç–ª–∞–¥–∫–∞.")
    print("=" * 50)
