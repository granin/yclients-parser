#!/bin/bash

# Prepare Git Deployment Script
# This script prepares the clean production copy for Git deployment

echo "üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é —á–µ—Ä–µ–∑ Git..."

CLEAN_DIR="../pavel-repo-production"

if [ ! -d "$CLEAN_DIR" ]; then
    echo "‚ùå –ß–∏—Å—Ç–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $CLEAN_DIR"
    exit 1
fi

cd "$CLEAN_DIR"

# Initialize git repository
echo "üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
git init

# Create .gitignore if it doesn't exist
if [ ! -f ".gitignore" ]; then
    echo "üìã –°–æ–∑–¥–∞–Ω–∏–µ .gitignore..."
    cat > .gitignore << 'EOF'
# Environment files
.env
.env.local

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
venv/
env/
ENV/

# Logs
logs/
*.log

# Data exports
data/export/*.csv
data/export/*.json

# Browser data
.cache/
browser_cache/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Playwright
test-results/
playwright-report/
playwright/.cache/
EOF
fi

# Stage all files
echo "üìÇ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è commit..."
git add .

# Create initial commit
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ commit..."
git commit -m "üöÄ –ü–µ—Ä–≤—ã–π —Ä–µ–ª–∏–∑ YClients –ø–∞—Ä—Å–µ—Ä–∞

‚úÖ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- 4-—à–∞–≥–æ–≤–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è YClients (Service ‚Üí Court ‚Üí Date ‚Üí Prices)  
- –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Supabase
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ TimeWeb VDS
- Playwright –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 5 –ø–ª–æ—â–∞–¥–æ–∫ Pavel
- 22 —Ç–µ—Å—Ç–∞ (–≤—Å–µ –ø—Ä–æ—Ö–æ–¥—è—Ç)
- –†—É—Å—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
- Production ready

üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
- src/parser/yclients_parser.py - –ì–ª–∞–≤–Ω—ã–π Playwright –ø–∞—Ä—Å–µ—Ä  
- src/parser/parser_router.py - –°–∏—Å—Ç–µ–º–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
- lightweight_parser.py - –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
- –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

üéØ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ TimeWeb VDS"

echo "‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω"
echo ""

# Display repository status
echo "üìä –°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:"
git status --porcelain | wc -l | xargs echo "–§–∞–π–ª–æ–≤ –≤ staging area:"
echo ""

# Display file structure
echo "üìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:"
find . -type f -name "*.py" -o -name "*.md" -o -name "*.txt" -o -name "*.sh" | head -20
echo "..."
echo ""

echo "üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub/GitLab"  
echo "2. –î–æ–±–∞–≤—å—Ç–µ remote: git remote add origin <URL>"
echo "3. Push: git push -u origin main"
echo "4. Deploy –Ω–∞ TimeWeb VDS"
echo ""

echo "üí° –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:"
echo "cd $CLEAN_DIR"
echo "git remote add origin <–≤–∞—à-git-url>"
echo "git branch -M main"
echo "git push -u origin main"
echo ""

echo "üîó –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï.md"