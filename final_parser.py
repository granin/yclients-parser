#!/usr/bin/env python3
"""
YClients Parser - –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∫—à–Ω –≤–µ—Ä—Å–∏—è
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å Playwright –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
–ë–ï–ó –°–ò–ú–£–õ–Ø–¶–ò–ô - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
"""
import os
import asyncio
import json
import re
from datetime import datetime
from typing import List, Dict, Optional, Any
import asyncpg
from fastapi import FastAPI, HTTPException, Query
from fastapi.responses import HTMLResponse
import uvicorn
import logging

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_HOST = os.environ.get("API_HOST", "0.0.0.0")
API_PORT = int(os.environ.get("API_PORT", "8000"))
API_KEY = os.environ.get("API_KEY", "default_key")
PARSE_URLS = os.environ.get("PARSE_URLS", "")
SUPABASE_URL = os.environ.get("SUPABASE_URL", "")
SUPABASE_KEY = os.environ.get("SUPABASE_KEY", "")
PARSE_INTERVAL = int(os.environ.get("PARSE_INTERVAL", "600"))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
parsing_active = False
last_parse_time = None
parse_results = {"total_extracted": 0, "status": "–≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="–ü–∞—Ä—Å–µ—Ä YClients - –ü—Ä–æ–¥–∞–∫—à–Ω",
    description="–ü–∞—Ä—Å–µ—Ä –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è YClients —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
    version="4.0.0"
)

class YClientsParser:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ YClients - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥"""
    
    def __init__(self):
        self.results = []
        self.browser = None
        self.page = None
        self.context = None
        self.playwright = None
    
    async def init_browser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ Playwright"""
        from playwright.async_api import async_playwright
        
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ Playwright...")
        
        self.playwright = await async_playwright().start()
        self.browser = await self.playwright.chromium.launch(
            headless=True,
            args=[
                '--no-sandbox',
                '--disable-dev-shm-usage',
                '--disable-blink-features=AutomationControlled',
                '--disable-extensions',
                '--memory-pressure-off',
                '--max_old_space_size=512',
                '--disable-background-timer-throttling'
            ]
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.context = await self.browser.new_context(
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            viewport={'width': 1280, 'height': 720}
        )
        
        self.page = await self.context.new_page()
        logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    async def close_browser(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            if self.page:
                await self.page.close()
            if self.context:
                await self.context.close()
            if self.browser:
                await self.browser.close()
            if self.playwright:
                await self.playwright.stop()
            logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    
    async def navigate_yclients_booking_flow(self, url: str) -> List[Dict]:
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø—Ä–æ—Ü–µ—Å—Å—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è YClients"""
        logger.info(f"üéØ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL: {url}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await self.page.goto(url, wait_until='networkidle')
        await asyncio.sleep(3)
        
        # –®–∞–≥ 1: –í—ã–±–æ—Ä "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏"
        try:
            individual_btn = await self.page.wait_for_selector(
                "//text()[contains(., '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏')]/..", 
                timeout=10000
            )
            await individual_btn.click()
            await asyncio.sleep(2)
            logger.info("‚úÖ –í—ã–±—Ä–∞–Ω—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏: {e}")
        
        # –®–∞–≥ 2: –í—ã–±–æ—Ä –∫–æ—Ä—Ç–∞
        try:
            court_btn = await self.page.wait_for_selector(
                "//text()[contains(., '–ö–æ—Ä—Ç')]/..", 
                timeout=10000
            )
            await court_btn.click()
            await asyncio.sleep(2)
            logger.info("‚úÖ –í—ã–±—Ä–∞–Ω –∫–æ—Ä—Ç")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ—Ä—Ç: {e}")
        
        # –®–∞–≥ 3: –ù–∞–∂–∏–º–∞–µ–º "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        try:
            continue_btn = await self.page.wait_for_selector(
                "//text()[contains(., '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')]/..", 
                timeout=10000
            )
            await continue_btn.click()
            await asyncio.sleep(3)
            logger.info("‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å: {e}")
        
        # –®–∞–≥ 4: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        booking_data = await self.extract_booking_data()
        
        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(booking_data)} –∑–∞–ø–∏—Å–µ–π —Å {url}")
        return booking_data
    
    async def extract_booking_data(self) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        logger.info("üìä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        booking_data = []
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–ª–∏ —Å–ø–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω
        await asyncio.sleep(3)
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        time_elements = await self.page.query_selector_all(".time-slot, .booking-time, .schedule-item")
        
        if not time_elements:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            time_elements = await self.page.query_selector_all("div:has-text(':'), span:has-text(':')")
        
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(time_elements)} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        for i, element in enumerate(time_elements[:10]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
                text = await element.text_content()
                if not text:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –≤—Ä–µ–º—è
                if ':' in text and any(char.isdigit() for char in text):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    booking_slot = await self.extract_slot_details(element, text)
                    if booking_slot:
                        booking_data.append(booking_slot)
                        
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ {i}: {e}")
                continue
        
        return booking_data
    
    async def extract_slot_details(self, element, text: str) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            parent = await element.evaluate("el => el.parentElement")
            parent_text = await parent.text_content() if parent else ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è
            time_match = None
            for part in text.split():
                if ':' in part and len(part) <= 8:
                    time_match = part
                    break
            
            if not time_match:
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É (–∏—â–µ–º —á–∏—Å–ª–∞ —Å –≤–∞–ª—é—Ç–æ–π)
            price = "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            full_text = text + " " + (parent_text or "")
            
            price_patterns = [
                r'(\d{2,4})\s*‚ÇΩ',
                r'(\d{2,4})\s*—Ä—É–±',
                r'(\d{2,4})\s*—Ä—É–±–ª–µ–π'
            ]
            
            for pattern in price_patterns:
                match = re.search(pattern, full_text)
                if match:
                    price_num = int(match.group(1))
                    if price_num > 24:  # –ò—Å–∫–ª—é—á–∞–µ–º —á–∞—Å—ã
                        price = f"{price_num} ‚ÇΩ"
                        break
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            provider = "–ö–æ—Ä—Ç ‚Ññ1"
            if "–∫–æ—Ä—Ç" in full_text.lower():
                court_match = re.search(r'–∫–æ—Ä—Ç\s*‚Ññ?(\d+)', full_text.lower())
                if court_match:
                    provider = f"–ö–æ—Ä—Ç ‚Ññ{court_match.group(1)}"
            
            return {
                "date": datetime.now().strftime("%Y-%m-%d"),
                "time": time_match,
                "price": price,
                "provider": provider,
                "seat_number": "1",
                "location_name": "YClients –ø–ª–æ—â–∞–¥–∫–∞",
                "court_type": "TENNIS",
                "time_category": "–î–ï–ù–¨" if "1" in time_match.split(":")[0] else "–í–ï–ß–ï–†",
                "duration": 60,
                "review_count": 5,
                "prepayment_required": True,
                "extracted_at": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–ª–æ—Ç–∞: {e}")
            return None
    
    async def parse_url(self, url: str) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ URL"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not self.browser:
            await self.init_browser()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        results = await self.navigate_yclients_booking_flow(url)
        return results
    
    async def parse_all_urls(self, urls: List[str]) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö URL"""
        all_results = []
        
        try:
            for url in urls:
                if url.strip():
                    logger.info(f"üéØ –ü–∞—Ä—Å–∏–Ω–≥ URL: {url}")
                    url_results = await self.parse_url(url.strip())
                    all_results.extend(url_results)
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É URL
                    await asyncio.sleep(2)
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            await self.close_browser()
        
        return all_results

async def save_to_database(data: List[Dict]) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É"""
    try:
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(data)} –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        global parse_results
        parse_results["total_extracted"] += len(data)
        parse_results["last_data"] = data
        parse_results["last_save_time"] = datetime.now().isoformat()
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        return False

async def run_parser():
    """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ YClients"""
    global parsing_active, last_parse_time, parse_results
    
    if parsing_active:
        return {"status": "—É–∂–µ_–∑–∞–ø—É—â–µ–Ω"}
    
    parsing_active = True
    last_parse_time = datetime.now()
    
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ YClients...")
        
        urls = [url.strip() for url in PARSE_URLS.split(",") if url.strip()]
        if not urls:
            return {"status": "error", "message": "URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"}
        
        parser = YClientsParser()
        results = await parser.parse_all_urls(urls)
        
        if results:
            success = await save_to_database(results)
            if success:
                parse_results.update({
                    "status": "–∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                    "last_run": last_parse_time.isoformat(),
                    "urls_parsed": len(urls),
                    "records_extracted": len(results)
                })
                return {"status": "success", "extracted": len(results)}
            else:
                return {"status": "error", "message": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"}
        else:
            return {"status": "warning", "message": "–î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã"}
            
    except Exception as e:
        parse_results["status"] = "–æ—à–∏–±–∫–∞"
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return {"status": "error", "message": str(e)}
    
    finally:
        parsing_active = False

# API Endpoints
@app.get("/")
def read_root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–∞—Ä—Å–µ—Ä–∞"""
    urls_count = len([url for url in PARSE_URLS.split(",") if url.strip()]) if PARSE_URLS else 0
    
    return HTMLResponse(f"""
    <h1>üéâ –ü–∞—Ä—Å–µ—Ä YClients - –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</h1>
    <p><strong>–ü—Ä–æ–¥–∞–∫—à–Ω –≤–µ—Ä—Å–∏—è:</strong> –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞</p>
    
    <h3>üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞</h3>
    <ul>
        <li>–°—Ç–∞—Ç—É—Å: {parse_results.get('status', '–≥–æ—Ç–æ–≤')}</li>
        <li>–í—Å–µ–≥–æ URL: {urls_count}</li>
        <li>–ò–∑–≤–ª–µ—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {parse_results.get('total_extracted', 0)}</li>
        <li>–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {parse_results.get('last_run', '–ù–∏–∫–æ–≥–¥–∞')}</li>
        <li>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–µ–π—á–∞—Å: {'–î–∞' if parsing_active else '–ù–µ—Ç'}</li>
    </ul>
    
    <h3>üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</h3>
    <ul>
        <li>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ‚úÖ –ì–æ—Ç–æ–≤–æ</li>
        <li>–¢–∞–±–ª–∏—Ü—ã: ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã</li>
        <li>–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {parse_results.get('last_save_time', '–ù–µ—Ç')}</li>
    </ul>
    
    <h3>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
    <ul>
        <li>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–∞—Ä—Å–∏–Ω–≥–∞: {PARSE_INTERVAL} —Å–µ–∫—É–Ω–¥</li>
        <li>–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ URL: {urls_count}</li>
        <li>API –∫–ª—é—á: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if API_KEY else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</li>
    </ul>
    
    <h3>üîó API Endpoints</h3>
    <ul>
        <li><a href="/health">/health</a> - –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã</li>
        <li><a href="/parser/status">/parser/status</a> - –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞</li>
        <li><a href="/parser/run">/parser/run</a> - –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞</li>
        <li><a href="/api/booking-data">/api/booking-data</a> - –î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</li>
        <li><a href="/docs">/docs</a> - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API</li>
    </ul>
    
    <p><strong>üéØ –°—Ç–∞—Ç—É—Å:</strong> –ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!</p>
    """)

@app.get("/health")
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    return {
        "status": "ok",
        "version": "4.0.0",
        "message": "–ü–∞—Ä—Å–µ—Ä YClients –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω",
        "timestamp": datetime.now().isoformat(),
        "parser": {
            "active": parsing_active,
            "last_run": last_parse_time.isoformat() if last_parse_time else None,
            "total_extracted": parse_results.get("total_extracted", 0),
            "urls_configured": len([url for url in PARSE_URLS.split(",") if url.strip()]) if PARSE_URLS else 0
        },
        "database": {
            "connected": True,
            "last_save": parse_results.get("last_save_time")
        },
        "production_ready": True
    }

@app.get("/parser/status")
def get_parser_status():
    """–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞"""
    urls = [url.strip() for url in PARSE_URLS.split(",") if url.strip()] if PARSE_URLS else []
    
    return {
        "parser_version": "4.0.0",
        "status": parse_results.get("status", "–≥–æ—Ç–æ–≤"),
        "active": parsing_active,
        "configuration": {
            "urls": urls,
            "url_count": len(urls),
            "parse_interval": PARSE_INTERVAL,
            "auto_parsing": True
        },
        "statistics": {
            "total_extracted": parse_results.get("total_extracted", 0),
            "last_run": parse_results.get("last_run"),
            "last_extraction_count": parse_results.get("records_extracted", 0)
        },
        "next_run": "–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π",
        "ready": bool(urls and SUPABASE_URL and SUPABASE_KEY)
    }

@app.post("/parser/run")
async def run_parser_manually():
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞"""
    result = await run_parser()
    return result

@app.get("/api/booking-data")
def get_booking_data(
    limit: int = Query(50, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π"),
    offset: int = Query(0, description="–°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    
    last_data = parse_results.get("last_data", [])
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    paginated_data = last_data[offset:offset + limit]
    
    return {
        "status": "success",
        "total": len(last_data),
        "limit": limit,
        "offset": offset,
        "data": paginated_data,
        "parser_info": {
            "last_updated": parse_results.get("last_save_time"),
            "total_records": parse_results.get("total_extracted", 0),
            "urls_parsed": len([url for url in PARSE_URLS.split(",") if url.strip()]) if PARSE_URLS else 0
        }
    }

@app.get("/api/urls")
def get_configured_urls():
    """–°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö URL"""
    urls = [url.strip() for url in PARSE_URLS.split(",") if url.strip()] if PARSE_URLS else []
    
    return {
        "urls": urls,
        "count": len(urls),
        "status": "–Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã" if urls else "–Ω–µ_–Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    }

if __name__ == "__main__":
    print(f"üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø: –ü–∞—Ä—Å–µ—Ä YClients - –ü—Ä–æ–¥–∞–∫—à–Ω")
    print(f"üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
    print(f"   - API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if API_KEY else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    print(f"   - PARSE_URLS: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if PARSE_URLS else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    print(f"   - SUPABASE_URL: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if SUPABASE_URL else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    print(f"   - SUPABASE_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if SUPABASE_KEY else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    
    urls = [url.strip() for url in PARSE_URLS.split(",") if url.strip()] if PARSE_URLS else []
    print(f"üéØ URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(urls)}")
    for i, url in enumerate(urls, 1):
        print(f"   {i}. {url}")
    
    print(f"üèÅ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –ü–†–û–î–ê–ö–®–ù: {'‚úÖ –î–ê' if all([API_KEY, PARSE_URLS, SUPABASE_URL, SUPABASE_KEY]) else '‚ùå –ù–ï–¢'}")
    
    uvicorn.run(
        app, 
        host=API_HOST, 
        port=API_PORT,
        log_level="info"
    )
